# -*- coding: utf-8 -*-
"""Tiktok_political.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KvGlpRAVRAJvXZM1nqZP0sCPbiCa5nv2
"""

import pandas as pd

# Load the Excel file
file_path = '/content/drive/MyDrive/savedrecs_tiktok.xlsx'
excel_data = pd.ExcelFile(file_path)
df = excel_data.parse('savedrecs')
df.columns

# Filter the dataset for rows where the Abstract column contains the specified keywords
keywords = ['political', 'politic', 'politics', 'election']
filtered_df = df[df['Abstract'].str.contains('|'.join(keywords), case=False, na=False)]

import re
# Extracting relevant columns from the previously filtered DataFrame
filtered_df_subset = filtered_df[['Affiliations', 'Article Title', 'Abstract']].copy()

# Helper function to extract specific components from the Abstract
def extract_info_from_abstract(abstract, section):
    patterns = {
        'objective': r'(objective[s]?|aim[s]?|purpose)[:\s]*([^\.]*)',
        'methods': r'(method[s]?|approach|analysis)[:\s]*([^\.]*)',
        'findings': r'(result[s]?|finding[s]?|conclusion[s]?)[:\s]*([^\.]*)',
        'country': r'\b(in|for|from|of|within)\s([\w\s]+)(?=\.)',
    }
    pattern = patterns.get(section)
    if not pattern:
        return ''
    match = re.search(pattern, abstract, re.IGNORECASE)
    return match.group(2).strip() if match else ''

# Applying the extraction functions
filtered_df_subset['Objective'] = filtered_df_subset['Abstract'].apply(lambda x: extract_info_from_abstract(x, 'objective'))
filtered_df_subset['Analytical Methods'] = filtered_df_subset['Abstract'].apply(lambda x: extract_info_from_abstract(x, 'methods'))
filtered_df_subset['Findings'] = filtered_df_subset['Abstract'].apply(lambda x: extract_info_from_abstract(x, 'findings'))
filtered_df_subset['Country'] = filtered_df_subset['Abstract'].apply(lambda x: extract_info_from_abstract(x, 'country'))

# Cleaning up the table by dropping the Abstract column
filtered_df_subset.drop(columns=['Abstract'], inplace=True)

filtered_df_subset

import pandas as pd

# Load the Excel file
file_path = '/content/drive/MyDrive/savedrecs_tiktok.xlsx'
excel_data = pd.ExcelFile(file_path)
df = excel_data.parse('savedrecs')
df.columns

# Define a list of specific market types to search for, taking into account different cases and plural/singular forms
market_types_specific = [
    'political', 'campaign', 'politics', 'election', 'ideology','sovereignty', 'allegations', 'political discourse',
    'vote', 'voting', 'inference',  'meddling',
]

# Function to search for the specific market types in the text
def search_specific_markets(text):
    text = text.lower()  # Convert text to lowercase to handle case insensitivity
    count = 0
    for market in market_types_specific:
        count += len(re.findall(r'\b' + re.escape(market) + r'\b', text))
    return count

# Apply the function to the Abstract column
specific_market_counts = df['Abstract'].dropna().astype(str).apply(search_specific_markets)

# Sum up the total count of appearances across all abstracts
total_specific_market_count = specific_market_counts.sum()

total_specific_market_count

# Function to search for each specific market type separately and count their appearances
def count_market_types(text):
    text = text.lower()  # Convert text to lowercase to handle case insensitivity
    counts = {market: len(re.findall(r'\b' + re.escape(market) + r'\b', text)) for market in market_types_specific}
    return counts

# Apply the function to the Abstract column
market_type_counts = df['Abstract'].dropna().astype(str).apply(count_market_types)

# Sum up the counts for each market type across all abstracts
total_market_type_counts = pd.DataFrame(list(market_type_counts)).sum()

total_market_type_counts

import seaborn as sns
import matplotlib.pyplot as plt
# Assuming `total_market_type_counts` is a pandas Series, convert it to a DataFrame for easier plotting
total_market_type_counts_df = total_market_type_counts.reset_index()
total_market_type_counts_df.columns = ['market_term', 'frequency']
# Plotting with Seaborn and Matplotlib
plt.figure(figsize=(12, 10))
# Create a color palette
palette = sns.color_palette("coolwarm", len(total_market_type_counts_df))
# Create a horizontal bar plot with Seaborn

sns.barplot(
    x='frequency',
    y='market_term',
    data=total_market_type_counts_df,
    palette=palette,
    edgecolor='black'
)
# Add title and labels
plt.title('Frequency of Political Terms in TikTok publications', fontsize=20)
plt.xlabel('Frequency', fontsize=18)
plt.ylabel('Political Term', fontsize=18)
# Increase font size of tick labels (x and y axis values)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)

# Add value labels to each bar
for index, row in total_market_type_counts_df.iterrows():
    plt.text(row['frequency'] + 1, index, str(row['frequency']), color='black', va="center", fontsize=16)
plt.tight_layout()
plt.show()

from graphviz import Digraph

# Create a detailed flowchart diagram with alternative cases and loops
diagram = Digraph(format="png", comment="Advanced TikTok Research Methodology", engine="dot")

# ðŸ”¹ Make text really bigger
diagram.attr(dpi="600")                # increase rendering resolution
diagram.attr(size="50,50!")            # expand canvas, prevent shrinking
diagram.attr('node', fontsize="36")  # global node font
diagram.attr('edge', fontsize="30")  # global edge font
#diagram.attr(rankdir="TB")             # layout direction


# Add nodes for each step in the methodology
diagram.node("1", "WOS Data Collection", shape="box", style="filled", color="lightgreen")
diagram.node("1a", "Validate Data", shape="diamond", style="filled", color="lightgrey")
diagram.node("2", "Data Preprocessing",  shape="box", style="filled", color="lightblue")
diagram.node("2a", "Remove Duplicates",  shape="box", style="filled", color="lightgrey")
diagram.node("2b", "Standardize Text",  shape="box", style="filled", color="lightgrey")
diagram.node("2c", "Categorize Data", shape="box", style="filled", color="lightgrey")
diagram.node("2d", "Processed Data", shape="parallelogram", style="filled", color="lightgreen")
diagram.node("3", "Bibliometric Analysis", shape="box", style="filled", color="lightpink")
diagram.node("3a", "Analyze Trends", shape="box", style="filled", color="lightgrey")
diagram.node("3b", "Collaboration Networks", shape="box", style="filled", color="lightgrey")
diagram.node("3c", "Sentiment Analysis (SA)",  shape="box", style="filled", color="lightpink")
diagram.node("3aa", "Custom Word Lists",  shape="box", style="filled", color="lightgrey")
diagram.node("3ab", "VADER", shape="box", style="filled", color="lightgrey")
diagram.node("3ac", "TextBlob", shape="box",  style="filled", color="lightgrey")
diagram.node("3d", "Latent Topic Extraction", shape="box", style="filled", color="lightpink")
diagram.node("3da", "LDA", shape="box", style="filled", color="lightgrey")
diagram.node("3db", "BERT-LDA",  shape="box", style="filled", color="lightgrey")
diagram.node("3dc", "BERT-Clustering",  shape="box", style="filled", color="lightgrey")
diagram.node("4", "Interpret & Visualize Topics",  shape="parallelogram", style="filled", color="lightyellow")
diagram.node("4a", "Interpret SA",  shape="parallelogram", style="filled", color="lightyellow")
diagram.node("4b", "Interpret Trends & Networks",  shape="parallelogram", style="filled", color="lightyellow")
diagram.node("5", "Validation & Comparative Analysis",  shape="box", style="filled", color="lightblue")
diagram.node("6", "Extract Insights", shape="ellipse", style="filled", color="lightgreen")

# Add edges to represent flow and alternative cases/loops
diagram.edge("1", "1a", label="Data Extraction")
diagram.edge("1a", "1", label="Validate")
diagram.edge("1a", "2", label="Validated")
diagram.edge("2", "2a", label="Cleaning")
diagram.edge("2", "2b", label="Preprocessing")
diagram.edge("2", "2c", label="Categorizing")
diagram.edge("2c", "2d", label="Processed Data")
diagram.edge("2a", "2d")
diagram.edge("2b", "2d")
diagram.edge("2d", "3")
diagram.edge("2d", "3c")
diagram.edge("3c", "3aa")
diagram.edge("3c", "3ab")
diagram.edge("3c", "3ac")
diagram.edge("2d", "3d")
diagram.edge("3d", "3da")
diagram.edge("3d", "3db")
diagram.edge("3d", "3dc")
diagram.edge("3da", "4")
diagram.edge("3db", "4")
diagram.edge("3dc", "4")
diagram.edge("3aa", "4a")
diagram.edge("3ab", "4a")
diagram.edge("3ac", "4a")
diagram.edge("4a", "5")
diagram.edge("3a", "4b")
diagram.edge("3b", "4b")
diagram.edge("4b", "5")
diagram.edge("4", "5")
diagram.edge("5", "6")
diagram.edge("3", "3a", label="Trends")
diagram.edge("3", "3b", label="Networks")
# Render the diagram
output_path = "Advanced_TikTok_Methodology.png"
diagram.render(output_path, view=False)

output_path + ".png"